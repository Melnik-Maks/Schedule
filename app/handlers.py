from gc import callbacks

from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.markdown import bold, italic, code
from aiogram.fsm.context import FSMContext
from pyasn1_modules.rfc8018 import algid_hmacWithSHA1
from sqlalchemy.util import await_fallback
import random


import app.keyboards as kb
import app.database.requests as rq
import config
from app.database.requests import user_has_group
from app.utils import send_schedule

router = Router()

class Reg(StatesGroup):
    name = State()
    number = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    is_member = await rq.user_has_group(message.from_user.id)
    if not is_member:
        await message.answer('–ü—Ä–∏–≤—ñ—Ç, —Ü–µ –±–æ—Ç —â–æ–± –∑—Ä—É—á–Ω–æ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ :)')
        await message.answer('–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –≥—Ä—É–ø—É ;)\n–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å–ø–µ—Ü–≤–∞–ª—å–Ω—ñ—Å—Ç—å', reply_markup=await kb.specialties(is_member))
    else:
        await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å', reply_markup=kb.menu)

@router.message(F.text == 'üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É')
async def reset_group(message: Message):
    user_group = await user_has_group(message.from_user.id)
    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å', reply_markup=await kb.specialties(user_group))

@router.callback_query(F.data.startswith('settings'))
async def go_back_to_group(callback: CallbackQuery):
    await callback.answer('–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å')
    await callback.message.edit_text('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é')

@router.callback_query(F.data.startswith('specialty'))
async def course(callback: CallbackQuery):
    user_group = await user_has_group(callback.from_user.id)
    await callback.message.edit_text('–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–µ—Ü–≤–∞–ª—å–Ω—ñ—Å—Ç—å', reply_markup=await kb.specialties(user_group))

@router.callback_query(F.data.startswith('course_'))
async def course(callback: CallbackQuery):
    await callback.message.edit_text('–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à –∫—É—Ä—Å', reply_markup=await kb.courses(callback.data.split('_')[1]))

@router.callback_query(F.data.startswith('group_'))
async def group(callback: CallbackQuery):
    await callback.message.edit_text('–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É', reply_markup=await kb.groups(
        callback.data.split('_')[1],
        callback.data.split('_')[2]
    ))

@router.callback_query(F.data.startswith('subgroup_'))
async def subgroup(callback: CallbackQuery):
    await callback.message.edit_text('–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –ø—ñ–¥–≥—Ä—É–ø—É', reply_markup=await kb.subgroups(
        callback.data.split('_')[1],
        callback.data.split('_')[2],
        callback.data.split('_')[3]
    ))

@router.callback_query(F.data.startswith('setGroup_'))
async def set_user_group(callback: CallbackQuery):
    if await rq.user_has_group(callback.from_user.id):
        await rq.update_user_group(callback.from_user.id, callback.data.split('_')[1])
        await callback.message.edit_text(f'–î—è–∫—É—î–º–æ, –≤–∞—à—É –≥—Ä—É–ø—É –∑–º—ñ–Ω–µ–Ω–æ.')
        await callback.message.answer(f'–í–∞—à–∞ –Ω–æ–≤–∞ –≥—Ä—É–ø–∞ {callback.data.split("_")[1]}',
                                         reply_markup=kb.settings)
    else:
        await rq.update_user_group(callback.from_user.id, callback.data.split('_')[1])
        await callback.message.edit_text(f'–î—è–∫—É—î–º–æ, –≤–∞—à—É –≥—Ä—É–ø—É –∑–∞–ø–∏—Å–∞–Ω–æ.')
        await callback.message.answer(f' –í–∞—à–∞ –≥—Ä—É–ø–∞ {callback.data.split("_")[1]}',
                                         reply_markup=kb.menu)

@router.message(F.text == 'üìÖ –†–æ–∑–∫–ª–∞–¥')
async def schedule(message: Message):
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: ', reply_markup=kb.schedule)

@router.message(F.text == 'üë§ –ü—Ä–æ—Ñ—ñ–ª—å')
async def schedule(message: Message):
    user = message.from_user

    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
        
        f"‚ö°Ô∏è <b>–Ü–º'—è:</b> {user.first_name}\n"
        f"üìõ <b>–ù—ñ–∫–Ω–µ–π–º:</b> @{user.username}\n"
        f"üÜî <b>ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b> {user.id}\n"
        f"üè´ <b>–ì—Ä—É–ø–∞:</b> {await rq.get_group_title_by_id(await rq.get_user_group_id_by_tg_id(user.id))}\n"
    )

    await message.answer(profile_text, parse_mode="HTML", reply_markup=kb.profile)

@router.message(F.text == 'üè† –î–æ–¥–æ–º—É')
async def schedule_for_week(message: Message):
    await message.answer('–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –º–µ–Ω—é', reply_markup=kb.menu)

@router.message(F.text == 'üìú –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥')
async def schedule_for_week(message: Message):
    await message.answer('–û—Å—å –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥: ', reply_markup=kb.original_schedule)

@router.message(F.text == 'üóìÔ∏è –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å')
async def schedule_for_week(message: Message):
    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å', reply_markup=await kb.days())

@router.message(F.text == 'üìÜ –°—å–æ–≥–æ–¥–Ω—ñ')
async def schedule_for_today(message: Message):
    day_number = message.date.weekday()
    if day_number == 6:
        await message.answer('–í –Ω–µ–¥—ñ–ª—é –ø–∞—Ä –Ω–µ–º–∞—î ;)')
    else:
        day = config.daysOfTheWeek[day_number]
        list_of_pairs_for_day = await rq.get_schedule_by_day(day, message.from_user.id)
        await send_schedule(message, day, list_of_pairs_for_day, False, 1)

@router.message(F.text == 'üìÜ –ó–∞–≤—Ç—Ä–∞')
async def schedule_for_tomorrow(message: Message):
    day_number = (message.date.weekday() + 1) % 7
    if day_number == 6:
        await message.answer('–í –Ω–µ–¥—ñ–ª—é –ø–∞—Ä –Ω–µ–º–∞—î ;)')
    else:
        day = config.daysOfTheWeek[day_number]
        list_of_pairs_for_day = await rq.get_schedule_by_day(day, message.from_user.id)
        await send_schedule(message, day, list_of_pairs_for_day, False, 2)


@router.message(F.text == 'üîî –í–∏–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è')
async def turn_off_reminders(message: Message):
    await rq.turn_off_reminders(message.from_user.id)
    await message.answer('üîï –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–∞—Ä–∏ –≤–∏–º–∫–Ω–µ–Ω–æ!', reply_markup=kb.settings_with_disable_reminders)


@router.message(F.text == 'üîï –£–≤—ñ–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è')
async def turn_on_reminders(message: Message):
    await rq.turn_on_reminders(message.from_user.id)
    await message.answer('üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–∞—Ä–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ!', reply_markup=kb.settings_with_enable_reminders)

@router.callback_query(F.data.startswith('day_'))
async def schedule_for_day(callback: CallbackQuery):
    await callback.answer('')
    day = callback.data.split('_')[1]
    list_of_pairs_for_day = await rq.get_schedule_by_day(day, callback.from_user.id)
    await send_schedule(callback, day, list_of_pairs_for_day, True)

@router.message(F.text == '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')
async def support(message: Message):
    if await rq.get_user_reminder(message.from_user.id):
        await message.answer(
            '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é',
            reply_markup=kb.settings_with_enable_reminders
        )
    else:
        await message.answer(
            '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é',
            reply_markup=kb.settings_with_disable_reminders
        )

@router.message(F.text == '‚öúÔ∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ ‚öúÔ∏è')
async def support(message: Message):
    await message.answer_sticker(
        "CAACAgIAAxkBAAIFe2d60JdzM4YRAdwlYigzUHi3alC9AAI8XwACDQOgSnN2ylbRRSMaNgQ",
        reply_markup=kb.support_button
    )

    '''sticker_pack_name = "StickerStar0132_by_e4zybot"

    try:
        sticker_set = await message.bot.get_sticker_set(sticker_pack_name)
        random_sticker = random.choice(sticker_set.stickers)

        await message.answer_sticker(random_sticker.file_id, reply_markup=kb.support_button)

    except Exception as e:
        await message.reply(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—ñ–∫–µ—Ä: {e}")'''

@router.message(F.sticker)
async def get_sticker_id(message: Message):
    sticker = message.sticker
    await message.reply(f"File ID —Ü—å–æ–≥–æ —Å—Ç—ñ–∫–µ—Ä–∞: {sticker.file_id}")


@router.message(Command('overwrite'))
async def overwriting():
    await rq.set_db()
