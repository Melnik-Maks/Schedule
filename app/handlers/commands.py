from gc import callbacks
import asyncio

from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from cachetools.func import mru_cache

import app.keyboards as kb
import app.database.requests as rq
import config
from app.utils import send_schedule


router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    if message.chat.type == "private":
        await rq.set_user(message.from_user.id)
        await message.answer_sticker("CAACAgIAAxUAAWd60zJewJz6pJWWiOPKTYVTpt_vAALNYgACfJOZSrLb9emXVeS9NgQ")
        await message.answer('<b>–ü—Ä–∏–≤—ñ—Ç! üëã</b>\n–Ø –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑—Ä—É—á–Ω–æ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ üìÖ!', parse_mode='HTML', reply_markup=await kb.menu(message.from_user.id))

    elif message.chat.type in ["group", "supergroup"]:
        await message.answer_sticker("CAACAgIAAxUAAWd60zJewJz6pJWWiOPKTYVTpt_vAALNYgACfJOZSrLb9emXVeS9NgQ")
        await message.answer('<b>–ü—Ä–∏–≤—ñ—Ç! üëã</b>\n<i>–Ø –±–æ—Ç, —è–∫–∏–π –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ª–µ–∫—Ü—ñ—ó üõéÔ∏è!</i>\n'
                             '<b>üìç–°–ø–µ—Ä—à—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–∞—Ç–∏ –≥—Ä—É–ø—É, –¥–ª—è —è–∫–æ—ó –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.</b>\nüîπ <i>–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É</i> /group, <i>—â–æ–± –≤–∏–±—Ä–∞—Ç–∏ –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É!</i>', parse_mode='HTML')


@router.message(Command('group'))
async def group_command(message: Message):
    if message.chat.type == "private":
        await message.answer(
            "<b>–î–ª—è —Ç–æ–≥–æ, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥, —É –≤–∞—à—ñ–π –≥—Ä—É–ø—ñ:</b>\n"
            "1. –î–æ–¥–∞–π—Ç–µ <a href='https://t.me/ScheduleeEbot'>@ScheduleeEbot</a> –≤ —Å–ø—ñ–ª—å–Ω–∏–π —á–∞—Ç\n"
            "2. –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞—Ç–∏ –ø—Ä–∞–≤–∞ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n"
            "<i>(–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Ç—É ‚Üí –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ ‚Üí –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Üí ScheduleeEbot)</i>\n"
            "3. –ü—Ä–æ–ø–∏—Å—É—î–º–æ –≤ —á–∞—Ç—ñ <code>/group</code>, –≤–∏–±–∏—Ä–∞—î–º–æ –∫—É—Ä—Å, —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å",
            parse_mode="HTML",
            reply_markup=kb.add_bot_to_chat,
        )
    elif message.chat.type in ["group", "supergroup"]:
        chat = await rq.get_chat_by_chat_id(message.chat.id)
        if chat:
            await message.answer(f'üéì <b>–û–±–µ—Ä—ñ—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:</b>', parse_mode='HTML', reply_markup=await kb.specialties(add_button_go_back=True, is_chat=True))
        else:
            await message.answer('üéì <b>–û–±–µ—Ä—ñ—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:</b>', reply_markup=await kb.specialties(False), parse_mode='HTML')

@router.message(Command('add'))
async def add_admin(message: Message):
    if message.from_user.id == 722714127:
        from main import bot
        user_id_str = message.text[4:].strip()
        if user_id_str.isdigit():
            user_id = int(user_id_str)
            user_exist = await rq.get_user_by_user_id(user_id)
            if user_exist:
                user = await bot.get_chat(user_id_str)
                if not user_exist.is_admin:
                    await rq.add_admin(user_id)
                    user = await bot.get_chat(user_id_str)
                    await message.answer(f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{user.username} –¥–æ–¥–∞–Ω–æ –¥–æ –∞–¥–º—ñ–Ω—ñ–≤')
                else:
                    await message.answer(f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user.username} –≤–∂–µ —î –∞–¥–º—ñ–Ω–æ–º')
            else:
                await message.answer('–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î')
        else:
            await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π tg_id')


@router.message(Command('delete'))
async def add_admin(message: Message):
    if message.from_user.id == 722714127:
        from main import bot
        user_id_str = message.text[7:].strip()
        if user_id_str.isdigit():
            user_id = int(user_id_str)
            user_exist = await rq.get_user_by_user_id(user_id)
            if user_exist:
                user = await bot.get_chat(user_id_str)
                if user_exist.is_admin:
                    await rq.delete_admin(user_id)
                    user = await bot.get_chat(user_id_str)
                    await message.answer(f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{user.username} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∞–¥–º—ñ–Ω—ñ–≤')
                else:
                    await message.answer(f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user.username} –ù–ï —î –∞–¥–º—ñ–Ω–æ–º')
            else:
                await message.answer('–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î')
        else:
            await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π tg_id')

@router.message(Command('set_schedule'))
async def add_admin(message: Message):
    if message.from_user.id == 722714127:
        await message.answer('üïí–¶–µ –∑–∞–π–º–µ –¥–µ—è–∫–∏–π —á–∞—Å...')

        #await message.edit_text(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è... ‚è≥")

        await rq.set_groups()
        await rq.clear_schedule()
        await rq.set_schedule()

        await message.answer('–†–æ–∑–∫–ª–∞–¥ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ ‚úÖ')

@router.message(Command('set_sticker'))
async def set_sticker(message: Message):
    sticker_id = message.text.split()[1]
    if message.from_user.id == 722714127:
        await rq.set_user_sticker(message.from_user.id, sticker_id)
        await message.answer('–í–∞—à —Å—Ç—ñ–∫–µ—Ä –∑–º—ñ–Ω–µ–Ω–æ ü¶†')

@router.message(Command('get_users'))
async def get_users(message: Message):
    from main import bot
    if message.from_user.id == 722714127:
        groups = await rq.get_groups()
        for group in groups:
            users = await rq.get_users_by_groups(group.id)
            text = f'<b>{group.specialty}-{group.course}{group.group}</b> ({len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)\n'
            for user in users:
                chat = await bot.get_chat(user.tg_id)
                text += f'@{chat.username}\n'
            await message.answer(text, parse_mode='HTML')

